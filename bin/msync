#!/usr/bin/env RUBYOPTS=-w ruby
# encoding: UTF-8
#
# !!! enforce line endings LF only !!!
# shell may fail to correctly recognize interpreter if CR precedes or replaces LF
#
#---------#---------#---------#---------#---------#---------#---------#---------#---------#---------#
#

VERSION = "msync 0.3"
LICENSE = <<-AGPLv3
msync - synchronize mtimes of similar dirtrees
Copyright Â© 2015-2016 Shad Sterling <me@shadsterling.com>

This program is free software: you can redistribute it and/or modify it under the terms of the
GNU Affero General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program.
If not, see http://www.gnu.org/licenses/agpl.html
AGPLv3

require 'ostruct'
require 'digest'
require 'fileutils'

# TODO: fix bug where some files appear to have wrong mtime
# TODO: check props of starting dirs
# TODO: make preservation of atime optional, off by default (preserve ctime by default)
# TODO: update perms to newest (by ctime); ctime will change, so preserve atime for these nodes
# TODO: detect when relatime will update atime and skip those files?
# TODO: option for dry run
# TODO: pass a "coiterator" object to block, with status and methods to alter iteration
# indicate hardlinks? verbose mode adds row with dev and inode #s?

######################


# iterate concurrently over similar dirtrees
# Parameters:
#  dirs <= an array of strings containing directory paths
#  subdir=nil <= the sub-directory for recursion
#  block <= a block to run on each sub-path
# Block Parameters:
#  message <= Human-readable iteration status information
#  path <= string of sub-path which exists in at least one of the dirs (one for each invocation of the block)
#  stats <= an array of stat objects of this path within each of the dirs; stats[n] = lstat( File.join( dirs[n], subdir, name ) )
# Block return:
#  sub-paths for which the block returns true are recursed into
def coiterate( dirs, subdir=nil, &block )
	return if nil == block
	subpaths = [] # entry paths (relative to dirs)
	namehash = {} # for faster entry name recall
	recurse = [] # entries to recurse into
	dirs.each_with_index do |dir,i|
		path = nil==subdir ? dir : File.join( dir, subdir )
		#puts "#{i}: #{path}"
		Dir.foreach( path ) do |name|
			next if [".",".."].include?(name)
			#puts "  / #{name}"
			if nil == namehash[name]
				subpath = nil==subdir ? name : File.join( subdir, name )
				subpaths << subpath
				namehash[name] = subpath
			end
		end if File.directory?( path )
	end
	#puts "#{pathss.count} names"
	subpaths.sort!
	subpaths.each do |subpath|
		## Generate stat objcts
		stats = []   # entry stats
		recursable = false
		dirs.each do |dir|
			path = File.join( dir, subpath )
			if File.exist?( path )
				stat = File.lstat( path )
				stats << stat
				recursable = true if stat.directory?
			else
				stats << nil
			end
		end
		if block.call( "Coiterating #{dirs.count} dirtrees", subpath, stats )
			recurse << subpath if recursable
		end
	end
	recurse.each do |subpath|
		#puts " ** recursing into #{subpath}"
		coiterate( dirs, subpath, &block )
	end
	nil
end

def md5( path, type )
	hash = nil
	case type
		when "file"
			#hash = Digest::MD5.file( path )
			#puts "md5: #{hash}"
			#hash = hash.base64digest
			#puts "md5: #{hash}"
			#hash = hash.freeze
			#puts "md5: #{hash}"
			hash = Digest::MD5.file( path ).base64digest.freeze
		when "link"
			target = File.readlink( path ).freeze
			hash = Digest::MD5.base64digest( target ).freeze
	end
	#puts "md5: #{hash.inspect} <= #{type.inspect}, #{path.inspect}"
	return hash
end

class Info
	FTypes = {"file"=>"file","directory"=>"dir","link"=>"symlink",nil=>"absent"}
	FTypes.default = "other"

	attr_reader :stat, :i, :basepath, :subpath, :fullpath, :type, :size, :hash, :group, :mtime, :atime, :mode
	attr_accessor :group, :change

	def self.modestring( mode )
		if nil == mode
			r = "nil"
		else
			r = (mode > 07777) ? "#{(mode>>11).to_s(8)}?" : ""
			r += (mode&(1<<11)!=0) ? "u" : "-" # run as owner user; see https://www.gnu.org/software/libc/manual/html_node/Permission-Bits.html#Permission-Bits
			r += (mode&(1<<10)!=0) ? "g" : "-" # run as owner group; see https://www.gnu.org/software/libc/manual/html_node/Permission-Bits.html#Permission-Bits
			r += (mode&(1<<9)!=0) ? "s" : "-" # "sticky" (direntry mods require perms on linked file); see https://www.gnu.org/software/libc/manual/html_node/Permission-Bits.html#Permission-Bits
			r += (mode&(1<<8)!=0) ? "r" : "-" # owner - read
			r += (mode&(1<<7)!=0) ? "w" : "-" # owner - write
			r += (mode&(1<<6)!=0) ? "x" : "-" # owner - execute
			r += (mode&(1<<5)!=0) ? "r" : "-" # group - read
			r += (mode&(1<<4)!=0) ? "w" : "-" # group - write
			r += (mode&(1<<3)!=0) ? "x" : "-" # group - execute
			r += (mode&(1<<2)!=0) ? "r" : "-" # other - read
			r += (mode&(1<<1)!=0) ? "w" : "-" # other - write
			r += (mode&(1<<0)!=0) ? "x" : "-" # other - execute
		end
		return r
	end

	def initialize( i, basepath, subpath, stat )
		@i = i
		@basepath = basepath
		@subpath = subpath
		@stat = stat
		@fullpath = File.join( @basepath, @subpath )
		if nil == @stat
			@type = "absent"
		else
			@type = FTypes[stat.ftype]
			@size = stat.size
			@mtime = stat.mtime
			@atime = stat.atime
			@mode = stat.mode
		end
	end

	def makehash
		if nil == @hash
			@hash = md5( @fullpath, @stat.ftype )
			restoretimes
		end
		@hash
	end

	def restoretimes
		changed=false
		restat = File.lstat(@fullpath)
		if restat.atime != @atime or restat.mtime != @mtime
			#puts "restoretimes: #{@fullpath}"
			File.utime( @atime, @mtime, @fullpath )
			#poststat = File.lstat( @fullpath )
			#puts "restoretimes: original = #{@stat.inspect}"
			#puts "restoretimes: checked  = #{restat.inspect}"
			#puts "restoretimes: restored = #{poststat.inspect}"
		end
		changed
	end

	def ==(other)
		#puts self.inspect
		#puts other.inspect
		r = false
		if other.type == self.type and other.mode == self.mode
			case self.type
				when "dir", "other", "absent"
					r = true
				when "file", "symlink"
					if other.size == self.size
						if other.makehash == self.makehash
							r = true if FileUtils.cmp( other.fullpath, self.fullpath )
							other.restoretimes
							self.restoretimes
						end
					end
				else
					raise "Unknown type #{self.type.inspect}"
			end
		end
		r
	end

	def inspect
		i = @i || "nil"
		group = @group || "nil"
		mtime = @mtime || "nil"
		atime = @atime || "nil"
		perms = Info.modestring(@mode)
		type = @type || "nil"
		size = @size || "nil"
		hash = @hash || "nil"
		basepath = @basepath || "nil"
		subpath = @subpath || "nil"
		"#<Info: #{i} #{group}, #{mtime} #{atime} #{perms}; #{type} #{size} #{hash}: #{basepath} / #{subpath}>"
	end
end


####  ENTRY POINT  ####



fmt="%Y-%m-%d %H:%M:%S %z" # for output timestamps
width=29
space=3
dirs = ARGV
dirs.each_with_index do |dir,i|
	pre = ("|"+(" "*(width+space-1)))*i + "/"+("-"*(width+space-1))+("-"*((width+space)*(dirs.length-i)))
	puts pre + (" "*space) + dir
end
puts ("|"+(" "*(width+space-1)))*dirs.length

files = 0
changed = 0
unchanged = 0
skipped = 0
pathcount = 0
prunecount = 0
multivers = 0

coiterate( dirs ) do | msg, path, stats |
	dircount = 0
	nilcount = 0
	hamcount = 0
	infos = stats.map.with_index do |stat,i|
		if nil == stat
			nilcount += 1
		else
			hamcount += 1
		end
		i = Info.new( i, dirs[i], path, stat )
		dircount += 1 if "dir" == i.type
		i
	end
	prune = 1 == dircount

	nextgroup = "A"
	infos.each_with_index do |a,i|
		#puts "a=#{i}: #{a.group.inspect}, #{a.fullpath}"
		next if nil == a.stat or "other" == a.type
		if nil == a.group
			a.group = nextgroup
			nextgroup = nextgroup.succ
			#puts "a=#{i}: #{a.group.inspect}, #{a.fullpath}"
		end
		((i+1)...infos.length).each do |j|
			b = infos[j]
			#puts "b=#{j}: #{b.group.inspect}, #{b.fullpath}"
			if nil == b.group and a == b
				b.group = a.group
				#puts "b=#{j}: #{b.group.inspect}, #{b.fullpath}"
			end
		end
	end

	#puts "groups: "+groups.inspect
	groups = infos.group_by(&:group)
	groups.each_pair do |group,members|
		#puts "#{group}: #{members}"
		#mtimes = members.map(&:mtime)
		#change = mtimes.min
		change = members.map(&:mtime).min
		members.each do |info|
			info.change = change unless nil == info.mtime or change >= info.mtime
		end
	end
	keycount = groups.count
	keycount -= 1 if groups.has_key?(nil)
	pathcount += 1 if keycount > 0
	prunecount += 1 if prune
	multivers += 1 if keycount > 1

	groups.each_pair do |group,members|
		next if nil == group
		skip = true
		h = "!!! BUG !!!"
		s = "!!! BUG !!!"
		t = "!!! BUG !!!"
		cols = infos.map do |info|
			r = "conflict"
			skipthis = false
			if "other" == info.type
				r = "unsupported"
				skipthis = false
			elsif nil == info.stat
				r = prune ? "pruned" : "absent"
				skipthis = false
			elsif group == info.group
				## validation: if not nil, compare rather than assign
				h = info.hash
				s = info.size
				t = info.type
				r = info.mtime.strftime( fmt )
				if nil == info.change
					r = ">=#{r}=<"
					skipthis = true
				else
					r = "..#{r}.."
					skipthis = false
				end
				raise "WTF" if info.mtime != info.stat.mtime
			end
			skip = false if false == skipthis
			r = "%-#{width}s" % r
			r
		end
		if not skip and not prune and 1 < hamcount
			p = Info.modestring(members[0].mode)
			cols << "%7s/%13s/%13s/%24s/%s" % [ t, s.inspect, p, nil==h ? "nil" : h, group ]
			cols << path
			puts cols.join( " "*space )
		end
		infos.each do |info|
			files += 1
			if "other" == info.type
				skipped += 1
			elsif nil != info.change
				raise "attempt to change a file which was marked to be skipped: #{info.fullpath}; #{info.stat.inspect}" if skip
				File.utime( info.atime, info.change, info.fullpath )
				changed += 1
			else
				unchanged += 1
			end
		end
	end

	!prune
end

puts "#{pathcount} sub-paths (#{prunecount} branches pruned), #{multivers} with conflicting versions, #{files} total entries; #{changed} changed, #{unchanged} unchanged, #{skipped} skipped"

